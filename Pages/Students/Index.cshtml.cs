using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using University.Data;
using University.Models;

namespace University.Pages.Students
{
    public class IndexModel : PageModel
    {
        private readonly University.Data.SchoolContext _context;

        public IndexModel(University.Data.SchoolContext context)
        {
            _context = context;
        }

        public string NameSort { get; set; }
        public string DateSort { get; set; }
        public string CurrentFilter { get; set; }
        public string CurrentSort { get; set; }

        public PaginatedList<Student> Students { get; set; }
        //the above statement replaces the below one, for pagination
        //public IList<Student> Students { get;set; }
        

        public async Task OnGetAsync(string sortOrder, string searchQuery, string currentFilter, int? pageIndex)
        {// the GET method receives this sortOrder string through the URL querystring generated by Anchor Tag Helper

            CurrentSort = sortOrder;
            
            NameSort = String.IsNullOrEmpty(sortOrder) ? "name_des" : "";

            DateSort = sortOrder == "Date" ? "date_des" : "Date";
            // the above two lines are for sorting, below ones are for filtering

            if (searchQuery != null)
            {
                pageIndex = 1;
            }
            else
            {
                searchQuery = currentFilter;
            }

            CurrentFilter = searchQuery;

            IQueryable<Student> studentsIQ = from s in _context.Students select s; //LINQ query

            if (!String.IsNullOrEmpty(searchQuery))
            {
                studentsIQ = studentsIQ.Where(s => s.LastName.ToUpper().Contains(searchQuery) || s.FirstName.ToUpper().Contains(searchQuery));
                //the ToUpper is added to avoid case sensitive matches, if not using sql, DB like SQLite, etc.
                /*There's a performance penalty for calling ToUpper.
                 * The ToUpper code adds a function in the WHERE clause of the TSQL SELECT statement. 
                 * The added function prevents the optimizer from using an index. 
                 * Given that SQL is installed as case-insensitive, it's best to avoid the ToUpper call when it's not needed.
                 */
}
//first fitering the data, then applying sort
switch (sortOrder)
{
case "name_des":
    studentsIQ = studentsIQ.OrderByDescending(s => s.LastName);
    break;
case "Date":
    studentsIQ = studentsIQ.OrderBy(s => s.EnrollmentDate);
    break;
case "date_des":
    studentsIQ = studentsIQ.OrderByDescending(s => s.EnrollmentDate);
    break;
default:
    studentsIQ = studentsIQ.OrderBy(s => s.LastName);
    break;
}

            int pageSize = 5;

            Students = await PaginatedList<Student>.CreateAsync(
                studentsIQ.AsNoTracking(), pageIndex ?? 1, pageSize);
            // The expression (pageIndex ?? 1) means return the value of pageIndex if it has a value. If pageIndex doesn't have a value, return 1.
            //Students = await studentsIQ.AsNoTracking().ToListAsync(); //The LINQ query above is not executed until now
            //Student = await _context.Students.ToListAsync(); //this line needs to be changed after changing StudentContext Student to Students
        }
    }
}
